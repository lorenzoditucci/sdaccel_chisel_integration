;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-08-25 22:51:12.887, builtAtMillis: 1503701472887
circuit SDAChiselWrapper : 
  module AXILiteControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {slave : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}, ap_idle : UInt<1>, ap_start : UInt<1>, flip ap_done : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg ap_start : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 21:21]
    reg auto_restart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 22:25]
    reg ap_idle : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[AXILiteControl.scala 23:20]
    reg ap_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 24:20]
    reg ap_start_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 25:23]
    ap_start_r <= ap_start @[AXILiteControl.scala 25:23]
    node _T_48 = eq(ap_start_r, UInt<1>("h00")) @[AXILiteControl.scala 26:35]
    node ap_start_pulse = and(ap_start, _T_48) @[AXILiteControl.scala 26:33]
    ap_done <= io.ap_done @[AXILiteControl.scala 29:11]
    io.ap_idle <= ap_idle @[AXILiteControl.scala 30:14]
    io.ap_start <= ap_start @[AXILiteControl.scala 31:15]
    when ap_done : @[AXILiteControl.scala 33:16]
      ap_idle <= UInt<1>("h01") @[AXILiteControl.scala 34:13]
      skip @[AXILiteControl.scala 33:16]
    node _T_51 = eq(ap_done, UInt<1>("h00")) @[AXILiteControl.scala 33:16]
    node _T_52 = and(_T_51, ap_start_pulse) @[AXILiteControl.scala 35:29]
    when _T_52 : @[AXILiteControl.scala 35:29]
      ap_idle <= UInt<1>("h00") @[AXILiteControl.scala 36:13]
      skip @[AXILiteControl.scala 35:29]
    node _T_55 = eq(ap_done, UInt<1>("h00")) @[AXILiteControl.scala 33:16]
    node _T_57 = eq(ap_start_pulse, UInt<1>("h00")) @[AXILiteControl.scala 35:29]
    node _T_58 = and(_T_55, _T_57) @[AXILiteControl.scala 35:29]
    when _T_58 : @[AXILiteControl.scala 37:14]
      ap_idle <= ap_idle @[AXILiteControl.scala 38:13]
      skip @[AXILiteControl.scala 37:14]
    reg stateSlaveWrite : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AXILiteControl.scala 42:28]
    reg writeAddr : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[AXILiteControl.scala 43:22]
    reg stateSlaveRead : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AXILiteControl.scala 45:27]
    reg readData : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[AXILiteControl.scala 46:21]
    node _T_66 = eq(stateSlaveWrite, UInt<3>("h00")) @[AXILiteControl.scala 50:56]
    node _T_67 = and(reset, _T_66) @[AXILiteControl.scala 50:37]
    io.slave.writeAddr.ready <= _T_67 @[AXILiteControl.scala 50:28]
    node _T_68 = eq(stateSlaveWrite, UInt<3>("h01")) @[AXILiteControl.scala 51:48]
    io.slave.writeData.ready <= _T_68 @[AXILiteControl.scala 51:28]
    io.slave.writeResp.bits <= UInt<2>("h00") @[AXILiteControl.scala 52:27]
    node _T_114 = eq(stateSlaveWrite, UInt<3>("h02")) @[AXILiteControl.scala 53:48]
    io.slave.writeResp.valid <= _T_114 @[AXILiteControl.scala 53:28]
    node addrwr_handshake = and(io.slave.writeAddr.valid, io.slave.writeAddr.ready) @[AXILiteControl.scala 55:51]
    node write_handshake = and(io.slave.writeData.valid, io.slave.writeData.ready) @[AXILiteControl.scala 56:50]
    when addrwr_handshake : @[AXILiteControl.scala 58:25]
      writeAddr <= io.slave.writeAddr.bits.addr @[AXILiteControl.scala 59:15]
      skip @[AXILiteControl.scala 58:25]
    node _T_115 = eq(stateSlaveWrite, UInt<3>("h00")) @[AXILiteControl.scala 63:24]
    when _T_115 : @[AXILiteControl.scala 63:34]
      when io.slave.writeAddr.valid : @[AXILiteControl.scala 64:35]
        stateSlaveWrite <= UInt<3>("h01") @[AXILiteControl.scala 65:23]
        skip @[AXILiteControl.scala 64:35]
      node _T_117 = eq(io.slave.writeAddr.valid, UInt<1>("h00")) @[AXILiteControl.scala 64:35]
      when _T_117 : @[AXILiteControl.scala 66:16]
        stateSlaveWrite <= UInt<3>("h00") @[AXILiteControl.scala 67:23]
        skip @[AXILiteControl.scala 66:16]
      skip @[AXILiteControl.scala 63:34]
    node _T_118 = eq(stateSlaveWrite, UInt<3>("h01")) @[AXILiteControl.scala 69:30]
    node _T_120 = eq(_T_115, UInt<1>("h00")) @[AXILiteControl.scala 63:34]
    node _T_121 = and(_T_120, _T_118) @[AXILiteControl.scala 69:42]
    when _T_121 : @[AXILiteControl.scala 69:42]
      when io.slave.writeData.valid : @[AXILiteControl.scala 70:35]
        stateSlaveWrite <= UInt<3>("h02") @[AXILiteControl.scala 71:23]
        skip @[AXILiteControl.scala 70:35]
      node _T_123 = eq(io.slave.writeData.valid, UInt<1>("h00")) @[AXILiteControl.scala 70:35]
      when _T_123 : @[AXILiteControl.scala 72:16]
        stateSlaveWrite <= UInt<3>("h01") @[AXILiteControl.scala 73:23]
        skip @[AXILiteControl.scala 72:16]
      skip @[AXILiteControl.scala 69:42]
    node _T_124 = eq(stateSlaveWrite, UInt<3>("h02")) @[AXILiteControl.scala 75:30]
    node _T_126 = eq(_T_115, UInt<1>("h00")) @[AXILiteControl.scala 63:34]
    node _T_128 = eq(_T_118, UInt<1>("h00")) @[AXILiteControl.scala 69:42]
    node _T_129 = and(_T_126, _T_128) @[AXILiteControl.scala 69:42]
    node _T_130 = and(_T_129, _T_124) @[AXILiteControl.scala 75:41]
    when _T_130 : @[AXILiteControl.scala 75:41]
      when io.slave.writeResp.ready : @[AXILiteControl.scala 76:35]
        stateSlaveWrite <= UInt<3>("h00") @[AXILiteControl.scala 77:23]
        skip @[AXILiteControl.scala 76:35]
      node _T_132 = eq(io.slave.writeResp.ready, UInt<1>("h00")) @[AXILiteControl.scala 76:35]
      when _T_132 : @[AXILiteControl.scala 78:16]
        stateSlaveWrite <= UInt<3>("h02") @[AXILiteControl.scala 79:23]
        skip @[AXILiteControl.scala 78:16]
      skip @[AXILiteControl.scala 75:41]
    node _T_134 = eq(_T_115, UInt<1>("h00")) @[AXILiteControl.scala 63:34]
    node _T_136 = eq(_T_118, UInt<1>("h00")) @[AXILiteControl.scala 69:42]
    node _T_137 = and(_T_134, _T_136) @[AXILiteControl.scala 69:42]
    node _T_139 = eq(_T_124, UInt<1>("h00")) @[AXILiteControl.scala 75:41]
    node _T_140 = and(_T_137, _T_139) @[AXILiteControl.scala 75:41]
    when _T_140 : @[AXILiteControl.scala 82:14]
      stateSlaveWrite <= UInt<3>("h00") @[AXILiteControl.scala 83:21]
      skip @[AXILiteControl.scala 82:14]
    node _T_141 = eq(stateSlaveRead, UInt<3>("h00")) @[AXILiteControl.scala 87:55]
    node _T_142 = and(reset, _T_141) @[AXILiteControl.scala 87:36]
    io.slave.readAddr.ready <= _T_142 @[AXILiteControl.scala 87:27]
    io.slave.readData.bits.data <= readData @[AXILiteControl.scala 88:31]
    io.slave.readData.bits.resp <= UInt<2>("h00") @[AXILiteControl.scala 89:31]
    node _T_143 = eq(stateSlaveRead, UInt<3>("h03")) @[AXILiteControl.scala 90:46]
    io.slave.readData.valid <= _T_143 @[AXILiteControl.scala 90:27]
    node addrrd_handshake = and(io.slave.readAddr.valid, io.slave.readAddr.ready) @[AXILiteControl.scala 92:50]
    node _T_144 = eq(stateSlaveRead, UInt<3>("h00")) @[AXILiteControl.scala 96:23]
    when _T_144 : @[AXILiteControl.scala 96:33]
      when io.slave.readAddr.valid : @[AXILiteControl.scala 97:34]
        stateSlaveRead <= UInt<3>("h03") @[AXILiteControl.scala 98:22]
        skip @[AXILiteControl.scala 97:34]
      node _T_146 = eq(io.slave.readAddr.valid, UInt<1>("h00")) @[AXILiteControl.scala 97:34]
      when _T_146 : @[AXILiteControl.scala 99:16]
        stateSlaveRead <= UInt<3>("h00") @[AXILiteControl.scala 100:22]
        skip @[AXILiteControl.scala 99:16]
      skip @[AXILiteControl.scala 96:33]
    node _T_147 = eq(stateSlaveRead, UInt<3>("h03")) @[AXILiteControl.scala 102:29]
    node _T_149 = eq(_T_144, UInt<1>("h00")) @[AXILiteControl.scala 96:33]
    node _T_150 = and(_T_149, _T_147) @[AXILiteControl.scala 102:43]
    when _T_150 : @[AXILiteControl.scala 102:43]
      node _T_151 = and(io.slave.readData.valid, io.slave.readData.ready) @[AXILiteControl.scala 103:34]
      when _T_151 : @[AXILiteControl.scala 103:60]
        stateSlaveRead <= UInt<3>("h00") @[AXILiteControl.scala 104:22]
        skip @[AXILiteControl.scala 103:60]
      node _T_153 = eq(_T_151, UInt<1>("h00")) @[AXILiteControl.scala 103:60]
      when _T_153 : @[AXILiteControl.scala 105:16]
        stateSlaveRead <= UInt<3>("h03") @[AXILiteControl.scala 106:22]
        skip @[AXILiteControl.scala 105:16]
      skip @[AXILiteControl.scala 102:43]
    node _T_155 = eq(_T_144, UInt<1>("h00")) @[AXILiteControl.scala 96:33]
    node _T_157 = eq(_T_147, UInt<1>("h00")) @[AXILiteControl.scala 102:43]
    node _T_158 = and(_T_155, _T_157) @[AXILiteControl.scala 102:43]
    when _T_158 : @[AXILiteControl.scala 108:14]
      stateSlaveRead <= UInt<3>("h00") @[AXILiteControl.scala 109:20]
      skip @[AXILiteControl.scala 108:14]
    when addrrd_handshake : @[AXILiteControl.scala 113:25]
      node _T_160 = eq(io.slave.readAddr.bits.addr, UInt<1>("h00")) @[AXILiteControl.scala 114:16]
      when _T_160 : @[AXILiteControl.scala 114:28]
        node _T_161 = shl(ap_done, 1) @[AXILiteControl.scala 115:50]
        node _T_162 = or(ap_start, _T_161) @[AXILiteControl.scala 115:39]
        node _T_163 = shl(ap_idle, 2) @[AXILiteControl.scala 115:76]
        node _T_164 = or(_T_162, _T_163) @[AXILiteControl.scala 115:65]
        node _T_165 = shl(ap_done, 3) @[AXILiteControl.scala 115:103]
        node _T_166 = or(_T_164, _T_165) @[AXILiteControl.scala 115:91]
        node _T_167 = shl(auto_restart, 7) @[AXILiteControl.scala 115:134]
        node _T_168 = or(_T_166, _T_167) @[AXILiteControl.scala 115:118]
        readData <= _T_168 @[AXILiteControl.scala 115:16]
        skip @[AXILiteControl.scala 114:28]
      skip @[AXILiteControl.scala 113:25]
    node _T_170 = eq(writeAddr, UInt<1>("h00")) @[AXILiteControl.scala 120:37]
    node _T_171 = and(write_handshake, _T_170) @[AXILiteControl.scala 120:24]
    node _T_172 = bits(io.slave.writeData.bits.strb, 0, 0) @[AXILiteControl.scala 120:80]
    node _T_173 = and(_T_171, _T_172) @[AXILiteControl.scala 120:49]
    node _T_174 = bits(io.slave.writeData.bits.data, 0, 0) @[AXILiteControl.scala 120:115]
    node _T_175 = and(_T_173, _T_174) @[AXILiteControl.scala 120:84]
    when _T_175 : @[AXILiteControl.scala 120:119]
      ap_start <= UInt<1>("h01") @[AXILiteControl.scala 121:14]
      skip @[AXILiteControl.scala 120:119]
    node _T_178 = eq(_T_175, UInt<1>("h00")) @[AXILiteControl.scala 120:119]
    node _T_179 = and(_T_178, ap_done) @[AXILiteControl.scala 122:23]
    when _T_179 : @[AXILiteControl.scala 122:23]
      ap_start <= auto_restart @[AXILiteControl.scala 123:14]
      skip @[AXILiteControl.scala 122:23]
    node _T_181 = eq(io.slave.readAddr.bits.addr, UInt<1>("h00")) @[AXILiteControl.scala 127:34]
    node _T_182 = and(addrrd_handshake, _T_181) @[AXILiteControl.scala 127:25]
    when _T_182 : @[AXILiteControl.scala 127:46]
      ap_done <= UInt<1>("h00") @[AXILiteControl.scala 128:13]
      skip @[AXILiteControl.scala 127:46]
    node _T_185 = eq(writeAddr, UInt<1>("h00")) @[AXILiteControl.scala 133:37]
    node _T_186 = and(write_handshake, _T_185) @[AXILiteControl.scala 133:24]
    node _T_187 = bits(io.slave.writeData.bits.strb, 0, 0) @[AXILiteControl.scala 133:80]
    node _T_188 = and(_T_186, _T_187) @[AXILiteControl.scala 133:49]
    when _T_188 : @[AXILiteControl.scala 133:84]
      node _T_189 = bits(io.slave.writeData.bits.data, 7, 7) @[AXILiteControl.scala 134:49]
      auto_restart <= _T_189 @[AXILiteControl.scala 134:18]
      skip @[AXILiteControl.scala 133:84]
    
  module SDAChiselWrapper : 
    input clock : Clock
    input reset : UInt<1>
    output io : {m0 : {writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, strb : UInt<64>, last : UInt<1>}}, flip writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {id : UInt<1>, resp : UInt<2>}}, readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, id : UInt<1>, last : UInt<1>, resp : UInt<2>}}}, s0 : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.m0.writeAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 78:21]
    io.m0.writeData.valid <= UInt<1>("h00") @[AXIDefs.scala 79:21]
    io.m0.writeResp.ready <= UInt<1>("h00") @[AXIDefs.scala 80:21]
    io.m0.readAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 81:20]
    io.m0.readData.ready <= UInt<1>("h00") @[AXIDefs.scala 82:20]
    io.m0.writeAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 84:25]
    io.m0.writeAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 85:25]
    io.m0.writeAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 86:25]
    io.m0.writeAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 87:24]
    io.m0.writeAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 88:26]
    io.m0.writeAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 89:25]
    io.m0.writeAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 90:26]
    io.m0.writeAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 91:24]
    io.m0.writeAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 92:23]
    io.m0.writeData.bits.strb <= UInt<1>("h00") @[AXIDefs.scala 95:25]
    io.m0.writeData.bits.last <= UInt<1>("h00") @[AXIDefs.scala 96:25]
    io.m0.readAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 98:24]
    io.m0.readAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 99:24]
    io.m0.readAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 100:24]
    io.m0.readAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 101:23]
    io.m0.readAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 102:25]
    io.m0.readAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 103:24]
    io.m0.readAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 104:25]
    io.m0.readAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 105:23]
    io.m0.readAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 106:22]
    inst slave_fsm of AXILiteControl @[SDAChiselWrapper.scala 19:25]
    slave_fsm.io is invalid
    slave_fsm.clock <= clock
    slave_fsm.reset <= reset
    node _T_88 = eq(reset, UInt<1>("h00")) @[SDAChiselWrapper.scala 39:22]
    slave_fsm.reset <= _T_88 @[SDAChiselWrapper.scala 39:19]
    reg value : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 17:33]
    reg regFlagStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SDAChiselWrapper.scala 43:25]
    reg doneReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SDAChiselWrapper.scala 44:20]
    reg startReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SDAChiselWrapper.scala 45:21]
    reg idleReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SDAChiselWrapper.scala 46:20]
    idleReg <= slave_fsm.io.ap_idle @[SDAChiselWrapper.scala 48:11]
    startReg <= slave_fsm.io.ap_start @[SDAChiselWrapper.scala 49:12]
    slave_fsm.io.ap_done <= doneReg @[SDAChiselWrapper.scala 50:24]
    node _T_100 = eq(slave_fsm.io.ap_start, UInt<1>("h01")) @[SDAChiselWrapper.scala 54:30]
    node _T_102 = eq(regFlagStart, UInt<1>("h00")) @[SDAChiselWrapper.scala 54:57]
    node _T_103 = and(_T_100, _T_102) @[SDAChiselWrapper.scala 54:41]
    when _T_103 : @[SDAChiselWrapper.scala 54:69]
      node _T_105 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_107 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_108 = tail(_T_107, 1) @[Counter.scala 26:22]
      value <= _T_108 @[Counter.scala 26:13]
      when _T_105 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      regFlagStart <= UInt<1>("h01") @[SDAChiselWrapper.scala 56:18]
      skip @[SDAChiselWrapper.scala 54:69]
    node _T_112 = gt(value, UInt<1>("h00")) @[SDAChiselWrapper.scala 59:22]
    when _T_112 : @[SDAChiselWrapper.scala 59:28]
      doneReg <= UInt<1>("h01") @[SDAChiselWrapper.scala 60:13]
      skip @[SDAChiselWrapper.scala 59:28]
    slave_fsm.io.slave.writeAddr.bits.prot <= io.s0.writeAddr.bits.prot @[SDAChiselWrapper.scala 63:42]
    slave_fsm.io.slave.writeAddr.bits.addr <= io.s0.writeAddr.bits.addr @[SDAChiselWrapper.scala 64:42]
    slave_fsm.io.slave.writeAddr.valid <= io.s0.writeAddr.valid @[SDAChiselWrapper.scala 65:38]
    io.s0.writeAddr.ready <= slave_fsm.io.slave.writeAddr.ready @[SDAChiselWrapper.scala 66:25]
    slave_fsm.io.slave.writeData.bits.strb <= io.s0.writeData.bits.strb @[SDAChiselWrapper.scala 68:42]
    slave_fsm.io.slave.writeData.bits.data <= io.s0.writeData.bits.data @[SDAChiselWrapper.scala 69:42]
    slave_fsm.io.slave.writeData.valid <= io.s0.writeData.valid @[SDAChiselWrapper.scala 70:38]
    io.s0.writeData.ready <= slave_fsm.io.slave.writeData.ready @[SDAChiselWrapper.scala 71:25]
    io.s0.writeResp.valid <= slave_fsm.io.slave.writeResp.valid @[SDAChiselWrapper.scala 73:25]
    io.s0.writeResp.bits <= slave_fsm.io.slave.writeResp.bits @[SDAChiselWrapper.scala 74:24]
    slave_fsm.io.slave.writeResp.ready <= io.s0.writeResp.ready @[SDAChiselWrapper.scala 75:38]
    slave_fsm.io.slave.readAddr.bits.prot <= io.s0.readAddr.bits.prot @[SDAChiselWrapper.scala 77:41]
    slave_fsm.io.slave.readAddr.bits.addr <= io.s0.readAddr.bits.addr @[SDAChiselWrapper.scala 78:41]
    slave_fsm.io.slave.readAddr.valid <= io.s0.readAddr.valid @[SDAChiselWrapper.scala 79:37]
    io.s0.readAddr.ready <= slave_fsm.io.slave.readAddr.ready @[SDAChiselWrapper.scala 80:24]
    io.s0.readData.valid <= slave_fsm.io.slave.readData.valid @[SDAChiselWrapper.scala 82:24]
    slave_fsm.io.slave.readData.ready <= slave_fsm.io.slave.readData.ready @[SDAChiselWrapper.scala 83:37]
    io.s0.readData.bits.resp <= slave_fsm.io.slave.readData.bits.resp @[SDAChiselWrapper.scala 85:28]
    io.s0.readData.bits.data <= slave_fsm.io.slave.readData.bits.data @[SDAChiselWrapper.scala 86:28]
    
