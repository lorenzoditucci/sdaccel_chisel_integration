;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-08-25 22:51:12.887, builtAtMillis: 1503701472887
circuit AdderAxi : 
  module Adder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_5 = add(io.a, io.b) @[Adder.scala 17:18]
    node _T_6 = tail(_T_5, 1) @[Adder.scala 17:18]
    io.out <= _T_6 @[Adder.scala 17:10]
    
  module AdderAxi : 
    input clock : Clock
    input reset : UInt<1>
    output io : {m0 : {writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, strb : UInt<64>, last : UInt<1>}}, flip writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {id : UInt<1>, resp : UInt<2>}}, readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, id : UInt<1>, last : UInt<1>, resp : UInt<2>}}}, s0 : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.m0.writeAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 78:21]
    io.m0.writeData.valid <= UInt<1>("h00") @[AXIDefs.scala 79:21]
    io.m0.writeResp.ready <= UInt<1>("h00") @[AXIDefs.scala 80:21]
    io.m0.readAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 81:20]
    io.m0.readData.ready <= UInt<1>("h00") @[AXIDefs.scala 82:20]
    io.m0.writeAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 84:25]
    io.m0.writeAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 85:25]
    io.m0.writeAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 86:25]
    io.m0.writeAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 87:24]
    io.m0.writeAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 88:26]
    io.m0.writeAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 89:25]
    io.m0.writeAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 90:26]
    io.m0.writeAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 91:24]
    io.m0.writeAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 92:23]
    io.m0.writeData.bits.strb <= UInt<1>("h00") @[AXIDefs.scala 95:25]
    io.m0.writeData.bits.last <= UInt<1>("h00") @[AXIDefs.scala 96:25]
    io.m0.readAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 98:24]
    io.m0.readAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 99:24]
    io.m0.readAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 100:24]
    io.m0.readAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 101:23]
    io.m0.readAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 102:25]
    io.m0.readAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 103:24]
    io.m0.readAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 104:25]
    io.m0.readAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 105:23]
    io.m0.readAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 106:22]
    reg regStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 20:21]
    reg regDone : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 21:20]
    reg regIdle : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[AdderAxi.scala 22:20]
    reg regCtrAddr : UInt<64>, clock with : (reset => (reset, UInt<64>("h01"))) @[AdderAxi.scala 24:23]
    reg regCtrAddrWrite : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AdderAxi.scala 25:28]
    reg regDataReceived : UInt<512>, clock with : (reset => (reset, UInt<512>("h00"))) @[AdderAxi.scala 27:28]
    inst adder of Adder @[AdderAxi.scala 30:21]
    adder.io is invalid
    adder.clock <= clock
    adder.reset <= reset
    reg stateSlaveWrite : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 37:28]
    io.s0.writeAddr.ready <= UInt<1>("h01") @[AdderAxi.scala 40:25]
    node _T_102 = eq(stateSlaveWrite, UInt<3>("h00")) @[AdderAxi.scala 41:24]
    when _T_102 : @[AdderAxi.scala 41:34]
      when io.s0.writeAddr.valid : @[AdderAxi.scala 42:32]
        regCtrAddrWrite <= io.s0.writeAddr.bits.addr @[AdderAxi.scala 43:23]
        stateSlaveWrite <= UInt<3>("h01") @[AdderAxi.scala 44:23]
        skip @[AdderAxi.scala 42:32]
      skip @[AdderAxi.scala 41:34]
    node _T_103 = eq(stateSlaveWrite, UInt<3>("h01")) @[AdderAxi.scala 46:30]
    node _T_105 = eq(_T_102, UInt<1>("h00")) @[AdderAxi.scala 41:34]
    node _T_106 = and(_T_105, _T_103) @[AdderAxi.scala 46:44]
    when _T_106 : @[AdderAxi.scala 46:44]
      io.s0.writeData.ready <= UInt<1>("h01") @[AdderAxi.scala 47:27]
      when io.s0.writeData.valid : @[AdderAxi.scala 48:32]
        regDataReceived <= io.s0.writeData.bits.data @[AdderAxi.scala 49:23]
        regDone <= UInt<1>("h00") @[AdderAxi.scala 50:15]
        stateSlaveWrite <= UInt<3>("h03") @[AdderAxi.scala 51:23]
        skip @[AdderAxi.scala 48:32]
      skip @[AdderAxi.scala 46:44]
    node _T_109 = eq(stateSlaveWrite, UInt<3>("h03")) @[AdderAxi.scala 54:30]
    node _T_111 = eq(_T_102, UInt<1>("h00")) @[AdderAxi.scala 41:34]
    node _T_113 = eq(_T_103, UInt<1>("h00")) @[AdderAxi.scala 46:44]
    node _T_114 = and(_T_111, _T_113) @[AdderAxi.scala 46:44]
    node _T_115 = and(_T_114, _T_109) @[AdderAxi.scala 54:41]
    when _T_115 : @[AdderAxi.scala 54:41]
      io.s0.writeResp.bits <= UInt<2>("h00") @[AdderAxi.scala 55:26]
      io.s0.writeResp.valid <= UInt<1>("h01") @[AdderAxi.scala 56:27]
      io.s0.writeData.ready <= UInt<1>("h01") @[AdderAxi.scala 57:27]
      when io.s0.writeResp.ready : @[AdderAxi.scala 58:32]
        stateSlaveWrite <= UInt<3>("h07") @[AdderAxi.scala 59:23]
        skip @[AdderAxi.scala 58:32]
      skip @[AdderAxi.scala 54:41]
    node _T_163 = eq(stateSlaveWrite, UInt<3>("h07")) @[AdderAxi.scala 62:30]
    node _T_165 = eq(_T_102, UInt<1>("h00")) @[AdderAxi.scala 41:34]
    node _T_167 = eq(_T_103, UInt<1>("h00")) @[AdderAxi.scala 46:44]
    node _T_168 = and(_T_165, _T_167) @[AdderAxi.scala 46:44]
    node _T_170 = eq(_T_109, UInt<1>("h00")) @[AdderAxi.scala 54:41]
    node _T_171 = and(_T_168, _T_170) @[AdderAxi.scala 54:41]
    node _T_172 = and(_T_171, _T_163) @[AdderAxi.scala 62:39]
    when _T_172 : @[AdderAxi.scala 62:39]
      io.s0.writeData.ready <= UInt<1>("h00") @[AdderAxi.scala 63:27]
      io.s0.writeResp.valid <= UInt<1>("h00") @[AdderAxi.scala 64:27]
      stateSlaveWrite <= UInt<3>("h00") @[AdderAxi.scala 65:21]
      skip @[AdderAxi.scala 62:39]
    node _T_175 = bits(regDataReceived, 0, 0) @[AdderAxi.scala 68:30]
    regStart <= _T_175 @[AdderAxi.scala 68:12]
    node _T_177 = eq(regDone, UInt<1>("h01")) @[AdderAxi.scala 72:16]
    when _T_177 : @[AdderAxi.scala 72:27]
      regIdle <= UInt<1>("h01") @[AdderAxi.scala 73:13]
      skip @[AdderAxi.scala 72:27]
    reg stateSlaveRead : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 77:27]
    reg regCtrAddrRead : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AdderAxi.scala 78:27]
    io.s0.readAddr.ready <= UInt<1>("h01") @[AdderAxi.scala 80:24]
    node _T_183 = eq(stateSlaveRead, UInt<3>("h00")) @[AdderAxi.scala 81:23]
    when _T_183 : @[AdderAxi.scala 81:33]
      when io.s0.readAddr.valid : @[AdderAxi.scala 82:31]
        regCtrAddrRead <= io.s0.readAddr.bits.addr @[AdderAxi.scala 83:22]
        stateSlaveRead <= UInt<3>("h02") @[AdderAxi.scala 84:22]
        skip @[AdderAxi.scala 82:31]
      skip @[AdderAxi.scala 81:33]
    node _T_184 = eq(stateSlaveRead, UInt<3>("h02")) @[AdderAxi.scala 86:29]
    node _T_186 = eq(_T_183, UInt<1>("h00")) @[AdderAxi.scala 81:33]
    node _T_187 = and(_T_186, _T_184) @[AdderAxi.scala 86:46]
    when _T_187 : @[AdderAxi.scala 86:46]
      node _T_189 = dshl(regDone, UInt<1>("h01")) @[AdderAxi.scala 88:42]
      io.s0.readData.bits.data <= _T_189 @[AdderAxi.scala 88:30]
      io.s0.readData.valid <= UInt<1>("h01") @[AdderAxi.scala 90:26]
      when io.s0.readData.ready : @[AdderAxi.scala 91:31]
        stateSlaveRead <= UInt<3>("h07") @[AdderAxi.scala 92:22]
        skip @[AdderAxi.scala 91:31]
      skip @[AdderAxi.scala 86:46]
    node _T_191 = eq(stateSlaveRead, UInt<3>("h07")) @[AdderAxi.scala 94:29]
    node _T_193 = eq(_T_183, UInt<1>("h00")) @[AdderAxi.scala 81:33]
    node _T_195 = eq(_T_184, UInt<1>("h00")) @[AdderAxi.scala 86:46]
    node _T_196 = and(_T_193, _T_195) @[AdderAxi.scala 86:46]
    node _T_197 = and(_T_196, _T_191) @[AdderAxi.scala 94:38]
    when _T_197 : @[AdderAxi.scala 94:38]
      io.s0.readData.valid <= UInt<1>("h00") @[AdderAxi.scala 95:26]
      stateSlaveRead <= UInt<3>("h00") @[AdderAxi.scala 96:20]
      skip @[AdderAxi.scala 94:38]
    reg value : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 17:33]
    reg regFlagStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 100:25]
    reg regStartWriting : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 102:28]
    node _T_206 = eq(regStart, UInt<1>("h01")) @[AdderAxi.scala 104:17]
    node _T_208 = eq(regFlagStart, UInt<1>("h00")) @[AdderAxi.scala 104:44]
    node _T_209 = and(_T_206, _T_208) @[AdderAxi.scala 104:28]
    when _T_209 : @[AdderAxi.scala 104:56]
      node _T_211 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_213 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_214 = tail(_T_213, 1) @[Counter.scala 26:22]
      value <= _T_214 @[Counter.scala 26:13]
      when _T_211 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      regFlagStart <= UInt<1>("h01") @[AdderAxi.scala 106:18]
      skip @[AdderAxi.scala 104:56]
    node _T_218 = gt(value, UInt<1>("h00")) @[AdderAxi.scala 109:22]
    node _T_220 = lt(value, UInt<5>("h019")) @[AdderAxi.scala 109:45]
    node _T_221 = and(_T_218, _T_220) @[AdderAxi.scala 109:28]
    when _T_221 : @[AdderAxi.scala 109:52]
      node _T_223 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_225 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_226 = tail(_T_225, 1) @[Counter.scala 26:22]
      value <= _T_226 @[Counter.scala 26:13]
      when _T_223 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      skip @[AdderAxi.scala 109:52]
    node _T_229 = geq(value, UInt<5>("h019")) @[AdderAxi.scala 111:28]
    node _T_231 = eq(_T_221, UInt<1>("h00")) @[AdderAxi.scala 109:52]
    node _T_232 = and(_T_231, _T_229) @[AdderAxi.scala 111:36]
    when _T_232 : @[AdderAxi.scala 111:36]
      regStartWriting <= UInt<1>("h01") @[AdderAxi.scala 113:21]
      skip @[AdderAxi.scala 111:36]
    reg stateWriteMem : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 118:26]
    reg regWriteAddr : UInt<6>, clock with : (reset => (reset, UInt<6>("h020"))) @[AdderAxi.scala 119:25]
    reg regResp : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[AdderAxi.scala 120:20]
    io.m0.writeAddr.bits.size <= UInt<3>("h05") @[AdderAxi.scala 123:29]
    io.m0.writeAddr.bits.burst <= UInt<2>("h01") @[AdderAxi.scala 124:30]
    io.m0.writeAddr.bits.lock <= UInt<2>("h00") @[AdderAxi.scala 125:29]
    io.m0.writeAddr.bits.cache <= UInt<4>("h00") @[AdderAxi.scala 126:30]
    io.m0.writeAddr.bits.prot <= UInt<3>("h00") @[AdderAxi.scala 127:29]
    io.m0.writeAddr.bits.qos <= UInt<4>("h00") @[AdderAxi.scala 128:28]
    io.m0.writeAddr.bits.id <= UInt<1>("h00") @[AdderAxi.scala 130:27]
    io.m0.writeAddr.bits.addr <= regWriteAddr @[AdderAxi.scala 131:29]
    io.m0.writeAddr.bits.len <= UInt<1>("h00") @[AdderAxi.scala 132:28]
    node _T_241 = eq(stateWriteMem, UInt<3>("h00")) @[AdderAxi.scala 134:22]
    when _T_241 : @[AdderAxi.scala 134:32]
      when regStartWriting : @[AdderAxi.scala 135:26]
        stateWriteMem <= UInt<3>("h04") @[AdderAxi.scala 136:21]
        skip @[AdderAxi.scala 135:26]
      skip @[AdderAxi.scala 134:32]
    node _T_242 = eq(stateWriteMem, UInt<3>("h04")) @[AdderAxi.scala 138:28]
    node _T_244 = eq(_T_241, UInt<1>("h00")) @[AdderAxi.scala 134:32]
    node _T_245 = and(_T_244, _T_242) @[AdderAxi.scala 138:44]
    when _T_245 : @[AdderAxi.scala 138:44]
      io.m0.writeAddr.valid <= UInt<1>("h01") @[AdderAxi.scala 139:27]
      when io.m0.writeAddr.ready : @[AdderAxi.scala 140:32]
        stateWriteMem <= UInt<3>("h05") @[AdderAxi.scala 141:21]
        skip @[AdderAxi.scala 140:32]
      skip @[AdderAxi.scala 138:44]
    node _T_247 = eq(stateWriteMem, UInt<3>("h05")) @[AdderAxi.scala 143:28]
    node _T_249 = eq(_T_241, UInt<1>("h00")) @[AdderAxi.scala 134:32]
    node _T_251 = eq(_T_242, UInt<1>("h00")) @[AdderAxi.scala 138:44]
    node _T_252 = and(_T_249, _T_251) @[AdderAxi.scala 138:44]
    node _T_253 = and(_T_252, _T_247) @[AdderAxi.scala 143:43]
    when _T_253 : @[AdderAxi.scala 143:43]
      io.m0.writeAddr.valid <= UInt<1>("h01") @[AdderAxi.scala 144:27]
      io.m0.writeData.bits.data <= value @[AdderAxi.scala 146:31]
      io.m0.writeData.bits.last <= UInt<1>("h01") @[AdderAxi.scala 147:31]
      io.m0.writeData.valid <= UInt<1>("h01") @[AdderAxi.scala 148:27]
      io.m0.writeResp.ready <= UInt<1>("h01") @[AdderAxi.scala 149:27]
      when io.m0.writeData.ready : @[AdderAxi.scala 150:32]
        stateWriteMem <= UInt<3>("h06") @[AdderAxi.scala 151:21]
        skip @[AdderAxi.scala 150:32]
      skip @[AdderAxi.scala 143:43]
    node _T_258 = eq(stateWriteMem, UInt<3>("h06")) @[AdderAxi.scala 153:28]
    node _T_260 = eq(_T_241, UInt<1>("h00")) @[AdderAxi.scala 134:32]
    node _T_262 = eq(_T_242, UInt<1>("h00")) @[AdderAxi.scala 138:44]
    node _T_263 = and(_T_260, _T_262) @[AdderAxi.scala 138:44]
    node _T_265 = eq(_T_247, UInt<1>("h00")) @[AdderAxi.scala 143:43]
    node _T_266 = and(_T_263, _T_265) @[AdderAxi.scala 143:43]
    node _T_267 = and(_T_266, _T_258) @[AdderAxi.scala 153:42]
    when _T_267 : @[AdderAxi.scala 153:42]
      io.m0.writeResp.ready <= UInt<1>("h01") @[AdderAxi.scala 154:27]
      when io.m0.writeResp.valid : @[AdderAxi.scala 155:33]
        regResp <= io.m0.writeResp.bits.resp @[AdderAxi.scala 156:15]
        stateWriteMem <= UInt<3>("h07") @[AdderAxi.scala 157:21]
        skip @[AdderAxi.scala 155:33]
      skip @[AdderAxi.scala 153:42]
    node _T_269 = eq(stateWriteMem, UInt<3>("h07")) @[AdderAxi.scala 159:28]
    node _T_271 = eq(_T_241, UInt<1>("h00")) @[AdderAxi.scala 134:32]
    node _T_273 = eq(_T_242, UInt<1>("h00")) @[AdderAxi.scala 138:44]
    node _T_274 = and(_T_271, _T_273) @[AdderAxi.scala 138:44]
    node _T_276 = eq(_T_247, UInt<1>("h00")) @[AdderAxi.scala 143:43]
    node _T_277 = and(_T_274, _T_276) @[AdderAxi.scala 143:43]
    node _T_279 = eq(_T_258, UInt<1>("h00")) @[AdderAxi.scala 153:42]
    node _T_280 = and(_T_277, _T_279) @[AdderAxi.scala 153:42]
    node _T_281 = and(_T_280, _T_269) @[AdderAxi.scala 159:37]
    when _T_281 : @[AdderAxi.scala 159:37]
      io.m0.writeResp.ready <= UInt<1>("h00") @[AdderAxi.scala 161:27]
      io.m0.writeData.valid <= UInt<1>("h00") @[AdderAxi.scala 162:27]
      io.m0.writeAddr.valid <= UInt<1>("h00") @[AdderAxi.scala 163:27]
      regDone <= UInt<1>("h01") @[AdderAxi.scala 164:13]
      skip @[AdderAxi.scala 159:37]
    
