;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-08-25 22:51:12.887, builtAtMillis: 1503701472887
circuit AdderAxi : 
  module Adder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_5 = add(io.a, io.b) @[Adder.scala 17:18]
    node _T_6 = tail(_T_5, 1) @[Adder.scala 17:18]
    io.out <= _T_6 @[Adder.scala 17:10]
    
  module AdderAxi : 
    input clock : Clock
    input reset : UInt<1>
    output io : {m0 : {writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {id : UInt<1>, resp : UInt<2>}}, readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, id : UInt<1>, last : UInt<1>, resp : UInt<2>}}}, s0 : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.m0.writeAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 78:21]
    io.m0.writeData.valid <= UInt<1>("h00") @[AXIDefs.scala 79:21]
    io.m0.writeResp.ready <= UInt<1>("h00") @[AXIDefs.scala 80:21]
    io.m0.readAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 81:20]
    io.m0.readData.ready <= UInt<1>("h00") @[AXIDefs.scala 82:20]
    io.m0.writeAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 84:25]
    io.m0.writeAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 85:25]
    io.m0.writeAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 86:25]
    io.m0.writeAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 87:24]
    io.m0.writeAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 88:26]
    io.m0.writeAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 89:25]
    io.m0.writeAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 90:26]
    io.m0.writeAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 91:24]
    io.m0.writeAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 92:23]
    io.m0.writeData.bits.strb <= UInt<1>("h00") @[AXIDefs.scala 95:25]
    io.m0.writeData.bits.last <= UInt<1>("h00") @[AXIDefs.scala 96:25]
    io.m0.readAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 98:24]
    io.m0.readAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 99:24]
    io.m0.readAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 100:24]
    io.m0.readAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 101:23]
    io.m0.readAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 102:25]
    io.m0.readAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 103:24]
    io.m0.readAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 104:25]
    io.m0.readAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 105:23]
    io.m0.readAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 106:22]
    io.s0.writeResp.bits <= UInt<2>("h00") @[AdderAxi.scala 18:24]
    io.s0.readData.bits.resp <= UInt<2>("h00") @[AdderAxi.scala 19:28]
    reg regStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 24:21]
    reg regDone : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 25:20]
    reg regIdle : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[AdderAxi.scala 26:20]
    reg regCtrAddr : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AdderAxi.scala 28:23]
    reg regCtrAddrWrite : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AdderAxi.scala 29:28]
    reg regDataReceived : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[AdderAxi.scala 31:28]
    inst adder of Adder @[AdderAxi.scala 34:21]
    adder.io is invalid
    adder.clock <= clock
    adder.reset <= reset
    reg stateSlaveWrite : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 41:28]
    io.s0.writeAddr.ready <= UInt<1>("h01") @[AdderAxi.scala 44:25]
    node _T_147 = eq(stateSlaveWrite, UInt<3>("h00")) @[AdderAxi.scala 45:24]
    when _T_147 : @[AdderAxi.scala 45:34]
      when io.s0.writeAddr.valid : @[AdderAxi.scala 46:32]
        regCtrAddrWrite <= io.s0.writeAddr.bits.addr @[AdderAxi.scala 47:23]
        stateSlaveWrite <= UInt<3>("h01") @[AdderAxi.scala 48:23]
        skip @[AdderAxi.scala 46:32]
      skip @[AdderAxi.scala 45:34]
    node _T_148 = eq(stateSlaveWrite, UInt<3>("h01")) @[AdderAxi.scala 50:30]
    node _T_150 = eq(_T_147, UInt<1>("h00")) @[AdderAxi.scala 45:34]
    node _T_151 = and(_T_150, _T_148) @[AdderAxi.scala 50:44]
    when _T_151 : @[AdderAxi.scala 50:44]
      node _T_152 = eq(regCtrAddrWrite, regCtrAddr) @[AdderAxi.scala 51:26]
      when _T_152 : @[AdderAxi.scala 51:41]
        io.s0.writeData.ready <= UInt<1>("h01") @[AdderAxi.scala 52:29]
        when io.s0.writeData.valid : @[AdderAxi.scala 53:34]
          regDataReceived <= io.s0.writeData.bits.data @[AdderAxi.scala 54:25]
          node _T_154 = bits(io.s0.writeData.bits.data, 0, 0) @[AdderAxi.scala 55:46]
          regStart <= _T_154 @[AdderAxi.scala 55:18]
          node _T_155 = bits(io.s0.writeData.bits.data, 1, 1) @[AdderAxi.scala 56:45]
          regDone <= _T_155 @[AdderAxi.scala 56:17]
          node _T_156 = bits(io.s0.writeData.bits.data, 2, 2) @[AdderAxi.scala 57:45]
          regIdle <= _T_156 @[AdderAxi.scala 57:17]
          stateSlaveWrite <= UInt<3>("h03") @[AdderAxi.scala 59:25]
          skip @[AdderAxi.scala 53:34]
        skip @[AdderAxi.scala 51:41]
      node _T_158 = eq(_T_152, UInt<1>("h00")) @[AdderAxi.scala 51:41]
      when _T_158 : @[AdderAxi.scala 62:16]
        stateSlaveWrite <= UInt<3>("h04") @[AdderAxi.scala 63:23]
        skip @[AdderAxi.scala 62:16]
      skip @[AdderAxi.scala 50:44]
    node _T_159 = eq(stateSlaveWrite, UInt<3>("h03")) @[AdderAxi.scala 66:30]
    node _T_161 = eq(_T_147, UInt<1>("h00")) @[AdderAxi.scala 45:34]
    node _T_163 = eq(_T_148, UInt<1>("h00")) @[AdderAxi.scala 50:44]
    node _T_164 = and(_T_161, _T_163) @[AdderAxi.scala 50:44]
    node _T_165 = and(_T_164, _T_159) @[AdderAxi.scala 66:41]
    when _T_165 : @[AdderAxi.scala 66:41]
      io.s0.writeResp.bits <= UInt<2>("h00") @[AdderAxi.scala 67:26]
      io.s0.writeResp.valid <= UInt<1>("h01") @[AdderAxi.scala 68:27]
      io.s0.writeData.ready <= UInt<1>("h01") @[AdderAxi.scala 69:27]
      when io.s0.writeResp.ready : @[AdderAxi.scala 70:32]
        stateSlaveWrite <= UInt<3>("h04") @[AdderAxi.scala 71:23]
        skip @[AdderAxi.scala 70:32]
      skip @[AdderAxi.scala 66:41]
    node _T_168 = eq(stateSlaveWrite, UInt<3>("h04")) @[AdderAxi.scala 74:30]
    node _T_170 = eq(_T_147, UInt<1>("h00")) @[AdderAxi.scala 45:34]
    node _T_172 = eq(_T_148, UInt<1>("h00")) @[AdderAxi.scala 50:44]
    node _T_173 = and(_T_170, _T_172) @[AdderAxi.scala 50:44]
    node _T_175 = eq(_T_159, UInt<1>("h00")) @[AdderAxi.scala 66:41]
    node _T_176 = and(_T_173, _T_175) @[AdderAxi.scala 66:41]
    node _T_177 = and(_T_176, _T_168) @[AdderAxi.scala 74:39]
    when _T_177 : @[AdderAxi.scala 74:39]
      io.s0.writeData.ready <= UInt<1>("h00") @[AdderAxi.scala 75:27]
      io.s0.writeResp.valid <= UInt<1>("h00") @[AdderAxi.scala 76:27]
      stateSlaveWrite <= UInt<3>("h00") @[AdderAxi.scala 77:21]
      skip @[AdderAxi.scala 74:39]
    node _T_181 = eq(regDone, UInt<1>("h01")) @[AdderAxi.scala 84:16]
    when _T_181 : @[AdderAxi.scala 84:27]
      regIdle <= UInt<1>("h01") @[AdderAxi.scala 85:13]
      skip @[AdderAxi.scala 84:27]
    reg stateSlaveRead : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 89:27]
    reg regCtrAddrRead : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[AdderAxi.scala 90:27]
    io.s0.readAddr.ready <= UInt<1>("h01") @[AdderAxi.scala 92:24]
    node _T_187 = eq(stateSlaveRead, UInt<3>("h00")) @[AdderAxi.scala 93:23]
    when _T_187 : @[AdderAxi.scala 93:33]
      when io.s0.readAddr.valid : @[AdderAxi.scala 94:31]
        regCtrAddrRead <= io.s0.readAddr.bits.addr @[AdderAxi.scala 95:22]
        stateSlaveRead <= UInt<3>("h02") @[AdderAxi.scala 96:22]
        skip @[AdderAxi.scala 94:31]
      skip @[AdderAxi.scala 93:33]
    node _T_188 = eq(stateSlaveRead, UInt<3>("h02")) @[AdderAxi.scala 98:29]
    node _T_190 = eq(_T_187, UInt<1>("h00")) @[AdderAxi.scala 93:33]
    node _T_191 = and(_T_190, _T_188) @[AdderAxi.scala 98:46]
    when _T_191 : @[AdderAxi.scala 98:46]
      node _T_192 = eq(regCtrAddrRead, regCtrAddr) @[AdderAxi.scala 99:25]
      when _T_192 : @[AdderAxi.scala 99:40]
        node _T_194 = dshl(regStart, UInt<1>("h00")) @[AdderAxi.scala 101:45]
        node _T_196 = dshl(regDone, UInt<1>("h01")) @[AdderAxi.scala 101:73]
        node _T_197 = or(_T_194, _T_196) @[AdderAxi.scala 101:62]
        node _T_199 = dshl(regIdle, UInt<2>("h02")) @[AdderAxi.scala 101:101]
        node _T_200 = or(_T_197, _T_199) @[AdderAxi.scala 101:90]
        io.s0.readData.bits.data <= _T_200 @[AdderAxi.scala 101:32]
        io.s0.readData.valid <= UInt<1>("h01") @[AdderAxi.scala 103:28]
        when io.s0.readData.ready : @[AdderAxi.scala 104:33]
          stateSlaveRead <= UInt<3>("h03") @[AdderAxi.scala 106:24]
          skip @[AdderAxi.scala 104:33]
        skip @[AdderAxi.scala 99:40]
      skip @[AdderAxi.scala 98:46]
    node _T_202 = eq(stateSlaveRead, UInt<3>("h03")) @[AdderAxi.scala 109:29]
    node _T_204 = eq(_T_187, UInt<1>("h00")) @[AdderAxi.scala 93:33]
    node _T_206 = eq(_T_188, UInt<1>("h00")) @[AdderAxi.scala 98:46]
    node _T_207 = and(_T_204, _T_206) @[AdderAxi.scala 98:46]
    node _T_208 = and(_T_207, _T_202) @[AdderAxi.scala 109:40]
    when _T_208 : @[AdderAxi.scala 109:40]
      io.s0.readData.bits.resp <= UInt<2>("h00") @[AdderAxi.scala 110:30]
      stateSlaveRead <= UInt<3>("h04") @[AdderAxi.scala 111:20]
      skip @[AdderAxi.scala 109:40]
    node _T_209 = eq(stateSlaveRead, UInt<3>("h04")) @[AdderAxi.scala 112:29]
    node _T_211 = eq(_T_187, UInt<1>("h00")) @[AdderAxi.scala 93:33]
    node _T_213 = eq(_T_188, UInt<1>("h00")) @[AdderAxi.scala 98:46]
    node _T_214 = and(_T_211, _T_213) @[AdderAxi.scala 98:46]
    node _T_216 = eq(_T_202, UInt<1>("h00")) @[AdderAxi.scala 109:40]
    node _T_217 = and(_T_214, _T_216) @[AdderAxi.scala 109:40]
    node _T_218 = and(_T_217, _T_209) @[AdderAxi.scala 112:38]
    when _T_218 : @[AdderAxi.scala 112:38]
      io.s0.readData.valid <= UInt<1>("h00") @[AdderAxi.scala 113:26]
      stateSlaveRead <= UInt<3>("h00") @[AdderAxi.scala 114:20]
      skip @[AdderAxi.scala 112:38]
    reg value : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 17:33]
    reg regFlagStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 118:25]
    node _T_225 = eq(regStart, UInt<1>("h01")) @[AdderAxi.scala 120:17]
    node _T_227 = eq(regFlagStart, UInt<1>("h00")) @[AdderAxi.scala 120:44]
    node _T_228 = and(_T_225, _T_227) @[AdderAxi.scala 120:28]
    when _T_228 : @[AdderAxi.scala 120:56]
      node _T_230 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_232 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_233 = tail(_T_232, 1) @[Counter.scala 26:22]
      value <= _T_233 @[Counter.scala 26:13]
      when _T_230 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      regFlagStart <= UInt<1>("h01") @[AdderAxi.scala 122:18]
      skip @[AdderAxi.scala 120:56]
    node _T_237 = gt(value, UInt<1>("h00")) @[AdderAxi.scala 125:22]
    node _T_239 = lt(value, UInt<5>("h019")) @[AdderAxi.scala 125:45]
    node _T_240 = and(_T_237, _T_239) @[AdderAxi.scala 125:28]
    when _T_240 : @[AdderAxi.scala 125:52]
      node _T_242 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_244 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_245 = tail(_T_244, 1) @[Counter.scala 26:22]
      value <= _T_245 @[Counter.scala 26:13]
      when _T_242 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      skip @[AdderAxi.scala 125:52]
    node _T_248 = geq(value, UInt<5>("h019")) @[AdderAxi.scala 127:28]
    node _T_250 = eq(_T_240, UInt<1>("h00")) @[AdderAxi.scala 125:52]
    node _T_251 = and(_T_250, _T_248) @[AdderAxi.scala 127:36]
    when _T_251 : @[AdderAxi.scala 127:36]
      regDone <= UInt<1>("h01") @[AdderAxi.scala 128:13]
      skip @[AdderAxi.scala 127:36]
    
