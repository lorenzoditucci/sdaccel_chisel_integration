;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-08-25 22:51:12.887, builtAtMillis: 1503701472887
circuit AdderAxi : 
  module AXILiteControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {sl : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}, ap_idle : UInt<1>, ap_start : UInt<1>, flip ap_done : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg ap_start : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 21:21]
    reg auto_restart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 22:25]
    reg ap_idle : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[AXILiteControl.scala 23:20]
    reg ap_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 24:20]
    node _T_46 = eq(reset, UInt<1>("h00")) @[AXILiteControl.scala 25:27]
    reg areset : UInt<1>, clock @[AXILiteControl.scala 25:19]
    areset <= _T_46 @[AXILiteControl.scala 25:19]
    reg ap_start_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AXILiteControl.scala 26:23]
    ap_start_r <= ap_start @[AXILiteControl.scala 26:23]
    node _T_51 = eq(ap_start_r, UInt<1>("h00")) @[AXILiteControl.scala 27:35]
    node ap_start_pulse = and(ap_start, _T_51) @[AXILiteControl.scala 27:33]
    ap_done <= io.ap_done @[AXILiteControl.scala 30:11]
    io.ap_idle <= ap_idle @[AXILiteControl.scala 31:14]
    io.ap_start <= ap_start @[AXILiteControl.scala 32:15]
    when ap_done : @[AXILiteControl.scala 34:16]
      ap_idle <= UInt<1>("h01") @[AXILiteControl.scala 35:13]
      skip @[AXILiteControl.scala 34:16]
    node _T_54 = eq(ap_done, UInt<1>("h00")) @[AXILiteControl.scala 34:16]
    node _T_55 = and(_T_54, ap_start_pulse) @[AXILiteControl.scala 36:29]
    when _T_55 : @[AXILiteControl.scala 36:29]
      ap_idle <= UInt<1>("h00") @[AXILiteControl.scala 37:13]
      skip @[AXILiteControl.scala 36:29]
    node _T_58 = eq(ap_done, UInt<1>("h00")) @[AXILiteControl.scala 34:16]
    node _T_60 = eq(ap_start_pulse, UInt<1>("h00")) @[AXILiteControl.scala 36:29]
    node _T_61 = and(_T_58, _T_60) @[AXILiteControl.scala 36:29]
    when _T_61 : @[AXILiteControl.scala 38:14]
      ap_idle <= ap_idle @[AXILiteControl.scala 39:13]
      skip @[AXILiteControl.scala 38:14]
    reg stateSlaveWrite : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AXILiteControl.scala 43:28]
    reg writeAddr : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[AXILiteControl.scala 44:22]
    reg stateSlaveRead : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AXILiteControl.scala 46:27]
    reg readData : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[AXILiteControl.scala 47:21]
    node _T_69 = eq(stateSlaveWrite, UInt<3>("h00")) @[AXILiteControl.scala 51:53]
    node _T_70 = and(reset, _T_69) @[AXILiteControl.scala 51:34]
    io.sl.writeAddr.ready <= _T_70 @[AXILiteControl.scala 51:25]
    node _T_71 = eq(stateSlaveWrite, UInt<3>("h01")) @[AXILiteControl.scala 52:45]
    io.sl.writeData.ready <= _T_71 @[AXILiteControl.scala 52:25]
    io.sl.writeResp.bits <= UInt<2>("h00") @[AXILiteControl.scala 53:24]
    node _T_117 = eq(stateSlaveWrite, UInt<3>("h02")) @[AXILiteControl.scala 54:45]
    io.sl.writeResp.valid <= _T_117 @[AXILiteControl.scala 54:25]
    node addrwr_handshake = and(io.sl.writeAddr.valid, io.sl.writeAddr.ready) @[AXILiteControl.scala 56:48]
    node write_handshake = and(io.sl.writeData.valid, io.sl.writeData.ready) @[AXILiteControl.scala 57:47]
    when addrwr_handshake : @[AXILiteControl.scala 59:25]
      writeAddr <= io.sl.writeAddr.bits.addr @[AXILiteControl.scala 60:15]
      skip @[AXILiteControl.scala 59:25]
    node _T_118 = eq(stateSlaveWrite, UInt<3>("h00")) @[AXILiteControl.scala 64:24]
    when _T_118 : @[AXILiteControl.scala 64:34]
      when io.sl.writeAddr.valid : @[AXILiteControl.scala 65:32]
        stateSlaveWrite <= UInt<3>("h01") @[AXILiteControl.scala 66:23]
        skip @[AXILiteControl.scala 65:32]
      node _T_120 = eq(io.sl.writeAddr.valid, UInt<1>("h00")) @[AXILiteControl.scala 65:32]
      when _T_120 : @[AXILiteControl.scala 67:16]
        stateSlaveWrite <= UInt<3>("h00") @[AXILiteControl.scala 68:23]
        skip @[AXILiteControl.scala 67:16]
      skip @[AXILiteControl.scala 64:34]
    node _T_121 = eq(stateSlaveWrite, UInt<3>("h01")) @[AXILiteControl.scala 70:30]
    node _T_123 = eq(_T_118, UInt<1>("h00")) @[AXILiteControl.scala 64:34]
    node _T_124 = and(_T_123, _T_121) @[AXILiteControl.scala 70:42]
    when _T_124 : @[AXILiteControl.scala 70:42]
      when io.sl.writeData.valid : @[AXILiteControl.scala 71:32]
        stateSlaveWrite <= UInt<3>("h02") @[AXILiteControl.scala 72:23]
        skip @[AXILiteControl.scala 71:32]
      node _T_126 = eq(io.sl.writeData.valid, UInt<1>("h00")) @[AXILiteControl.scala 71:32]
      when _T_126 : @[AXILiteControl.scala 73:16]
        stateSlaveWrite <= UInt<3>("h01") @[AXILiteControl.scala 74:23]
        skip @[AXILiteControl.scala 73:16]
      skip @[AXILiteControl.scala 70:42]
    node _T_127 = eq(stateSlaveWrite, UInt<3>("h02")) @[AXILiteControl.scala 76:30]
    node _T_129 = eq(_T_118, UInt<1>("h00")) @[AXILiteControl.scala 64:34]
    node _T_131 = eq(_T_121, UInt<1>("h00")) @[AXILiteControl.scala 70:42]
    node _T_132 = and(_T_129, _T_131) @[AXILiteControl.scala 70:42]
    node _T_133 = and(_T_132, _T_127) @[AXILiteControl.scala 76:41]
    when _T_133 : @[AXILiteControl.scala 76:41]
      when io.sl.writeResp.ready : @[AXILiteControl.scala 77:32]
        stateSlaveWrite <= UInt<3>("h00") @[AXILiteControl.scala 78:23]
        skip @[AXILiteControl.scala 77:32]
      node _T_135 = eq(io.sl.writeResp.ready, UInt<1>("h00")) @[AXILiteControl.scala 77:32]
      when _T_135 : @[AXILiteControl.scala 79:16]
        stateSlaveWrite <= UInt<3>("h02") @[AXILiteControl.scala 80:23]
        skip @[AXILiteControl.scala 79:16]
      skip @[AXILiteControl.scala 76:41]
    node _T_137 = eq(_T_118, UInt<1>("h00")) @[AXILiteControl.scala 64:34]
    node _T_139 = eq(_T_121, UInt<1>("h00")) @[AXILiteControl.scala 70:42]
    node _T_140 = and(_T_137, _T_139) @[AXILiteControl.scala 70:42]
    node _T_142 = eq(_T_127, UInt<1>("h00")) @[AXILiteControl.scala 76:41]
    node _T_143 = and(_T_140, _T_142) @[AXILiteControl.scala 76:41]
    when _T_143 : @[AXILiteControl.scala 83:14]
      stateSlaveWrite <= UInt<3>("h00") @[AXILiteControl.scala 84:21]
      skip @[AXILiteControl.scala 83:14]
    node _T_144 = eq(stateSlaveRead, UInt<3>("h00")) @[AXILiteControl.scala 88:52]
    node _T_145 = and(reset, _T_144) @[AXILiteControl.scala 88:33]
    io.sl.readAddr.ready <= _T_145 @[AXILiteControl.scala 88:24]
    io.sl.readData.bits.data <= readData @[AXILiteControl.scala 89:28]
    io.sl.readData.bits.resp <= UInt<2>("h00") @[AXILiteControl.scala 90:28]
    node _T_146 = eq(stateSlaveRead, UInt<3>("h03")) @[AXILiteControl.scala 91:43]
    io.sl.readData.valid <= _T_146 @[AXILiteControl.scala 91:24]
    node addrrd_handshake = and(io.sl.readAddr.valid, io.sl.readAddr.ready) @[AXILiteControl.scala 93:47]
    node _T_147 = eq(stateSlaveRead, UInt<3>("h00")) @[AXILiteControl.scala 97:23]
    when _T_147 : @[AXILiteControl.scala 97:33]
      when io.sl.readAddr.valid : @[AXILiteControl.scala 98:31]
        stateSlaveRead <= UInt<3>("h03") @[AXILiteControl.scala 99:22]
        skip @[AXILiteControl.scala 98:31]
      node _T_149 = eq(io.sl.readAddr.valid, UInt<1>("h00")) @[AXILiteControl.scala 98:31]
      when _T_149 : @[AXILiteControl.scala 100:16]
        stateSlaveRead <= UInt<3>("h00") @[AXILiteControl.scala 101:22]
        skip @[AXILiteControl.scala 100:16]
      skip @[AXILiteControl.scala 97:33]
    node _T_150 = eq(stateSlaveRead, UInt<3>("h03")) @[AXILiteControl.scala 103:29]
    node _T_152 = eq(_T_147, UInt<1>("h00")) @[AXILiteControl.scala 97:33]
    node _T_153 = and(_T_152, _T_150) @[AXILiteControl.scala 103:43]
    when _T_153 : @[AXILiteControl.scala 103:43]
      node _T_154 = and(io.sl.readData.valid, io.sl.readData.ready) @[AXILiteControl.scala 104:31]
      when _T_154 : @[AXILiteControl.scala 104:54]
        stateSlaveRead <= UInt<3>("h00") @[AXILiteControl.scala 105:22]
        skip @[AXILiteControl.scala 104:54]
      node _T_156 = eq(_T_154, UInt<1>("h00")) @[AXILiteControl.scala 104:54]
      when _T_156 : @[AXILiteControl.scala 106:16]
        stateSlaveRead <= UInt<3>("h03") @[AXILiteControl.scala 107:22]
        skip @[AXILiteControl.scala 106:16]
      skip @[AXILiteControl.scala 103:43]
    node _T_158 = eq(_T_147, UInt<1>("h00")) @[AXILiteControl.scala 97:33]
    node _T_160 = eq(_T_150, UInt<1>("h00")) @[AXILiteControl.scala 103:43]
    node _T_161 = and(_T_158, _T_160) @[AXILiteControl.scala 103:43]
    when _T_161 : @[AXILiteControl.scala 109:14]
      stateSlaveRead <= UInt<3>("h00") @[AXILiteControl.scala 110:20]
      skip @[AXILiteControl.scala 109:14]
    when addrrd_handshake : @[AXILiteControl.scala 114:25]
      node _T_162 = eq(io.sl.readAddr.bits.addr, UInt<1>("h00")) @[AXILiteControl.scala 115:16]
      when _T_162 : @[AXILiteControl.scala 115:33]
        node _T_163 = shl(ap_done, 1) @[AXILiteControl.scala 116:50]
        node _T_164 = or(ap_start, _T_163) @[AXILiteControl.scala 116:39]
        node _T_165 = shl(ap_idle, 2) @[AXILiteControl.scala 116:76]
        node _T_166 = or(_T_164, _T_165) @[AXILiteControl.scala 116:65]
        node _T_167 = shl(ap_done, 3) @[AXILiteControl.scala 116:103]
        node _T_168 = or(_T_166, _T_167) @[AXILiteControl.scala 116:91]
        node _T_169 = shl(auto_restart, 7) @[AXILiteControl.scala 116:134]
        node _T_170 = or(_T_168, _T_169) @[AXILiteControl.scala 116:118]
        readData <= _T_170 @[AXILiteControl.scala 116:16]
        skip @[AXILiteControl.scala 115:33]
      skip @[AXILiteControl.scala 114:25]
    node _T_171 = eq(writeAddr, UInt<1>("h00")) @[AXILiteControl.scala 121:37]
    node _T_172 = and(write_handshake, _T_171) @[AXILiteControl.scala 121:24]
    node _T_173 = bits(io.sl.writeData.bits.strb, 0, 0) @[AXILiteControl.scala 121:82]
    node _T_174 = and(_T_172, _T_173) @[AXILiteControl.scala 121:54]
    node _T_175 = bits(io.sl.writeData.bits.data, 0, 0) @[AXILiteControl.scala 121:114]
    node _T_176 = and(_T_174, _T_175) @[AXILiteControl.scala 121:86]
    when _T_176 : @[AXILiteControl.scala 121:118]
      ap_start <= UInt<1>("h01") @[AXILiteControl.scala 122:14]
      skip @[AXILiteControl.scala 121:118]
    node _T_179 = eq(_T_176, UInt<1>("h00")) @[AXILiteControl.scala 121:118]
    node _T_180 = and(_T_179, ap_done) @[AXILiteControl.scala 123:23]
    when _T_180 : @[AXILiteControl.scala 123:23]
      ap_start <= auto_restart @[AXILiteControl.scala 124:14]
      skip @[AXILiteControl.scala 123:23]
    node _T_181 = eq(io.sl.readAddr.bits.addr, UInt<1>("h00")) @[AXILiteControl.scala 128:34]
    node _T_182 = and(addrrd_handshake, _T_181) @[AXILiteControl.scala 128:25]
    when _T_182 : @[AXILiteControl.scala 128:51]
      ap_done <= UInt<1>("h00") @[AXILiteControl.scala 129:13]
      skip @[AXILiteControl.scala 128:51]
    node _T_184 = eq(writeAddr, UInt<1>("h00")) @[AXILiteControl.scala 134:37]
    node _T_185 = and(write_handshake, _T_184) @[AXILiteControl.scala 134:24]
    node _T_186 = bits(io.sl.writeData.bits.strb, 0, 0) @[AXILiteControl.scala 134:82]
    node _T_187 = and(_T_185, _T_186) @[AXILiteControl.scala 134:54]
    when _T_187 : @[AXILiteControl.scala 134:86]
      node _T_188 = bits(io.sl.writeData.bits.data, 7, 7) @[AXILiteControl.scala 135:46]
      auto_restart <= _T_188 @[AXILiteControl.scala 135:18]
      skip @[AXILiteControl.scala 134:86]
    
  module Adder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_5 = add(io.a, io.b) @[Adder.scala 17:18]
    node _T_6 = tail(_T_5, 1) @[Adder.scala 17:18]
    io.out <= _T_6 @[Adder.scala 17:10]
    
  module AdderAxi : 
    input clock : Clock
    input reset : UInt<1>
    output io : {m0 : {writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, strb : UInt<64>, last : UInt<1>}}, flip writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {id : UInt<1>, resp : UInt<2>}}, readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, id : UInt<1>, last : UInt<1>, resp : UInt<2>}}}, s0 : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.m0.writeAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 78:21]
    io.m0.writeData.valid <= UInt<1>("h00") @[AXIDefs.scala 79:21]
    io.m0.writeResp.ready <= UInt<1>("h00") @[AXIDefs.scala 80:21]
    io.m0.readAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 81:20]
    io.m0.readData.ready <= UInt<1>("h00") @[AXIDefs.scala 82:20]
    io.m0.writeAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 84:25]
    io.m0.writeAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 85:25]
    io.m0.writeAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 86:25]
    io.m0.writeAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 87:24]
    io.m0.writeAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 88:26]
    io.m0.writeAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 89:25]
    io.m0.writeAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 90:26]
    io.m0.writeAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 91:24]
    io.m0.writeAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 92:23]
    io.m0.writeData.bits.strb <= UInt<1>("h00") @[AXIDefs.scala 95:25]
    io.m0.writeData.bits.last <= UInt<1>("h00") @[AXIDefs.scala 96:25]
    io.m0.readAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 98:24]
    io.m0.readAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 99:24]
    io.m0.readAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 100:24]
    io.m0.readAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 101:23]
    io.m0.readAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 102:25]
    io.m0.readAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 103:24]
    io.m0.readAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 104:25]
    io.m0.readAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 105:23]
    io.m0.readAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 106:22]
    inst slave_fsm of AXILiteControl @[AdderAxi.scala 19:25]
    slave_fsm.io is invalid
    slave_fsm.clock <= clock
    slave_fsm.reset <= reset
    inst adder of Adder @[AdderAxi.scala 22:21]
    adder.io is invalid
    adder.clock <= clock
    adder.reset <= reset
    slave_fsm.io.sl.writeAddr.bits.prot <= io.s0.writeAddr.bits.prot @[AdderAxi.scala 25:39]
    slave_fsm.io.sl.writeAddr.bits.addr <= io.s0.writeAddr.bits.addr @[AdderAxi.scala 26:39]
    slave_fsm.io.sl.writeAddr.valid <= io.s0.writeAddr.valid @[AdderAxi.scala 27:35]
    io.s0.writeAddr.ready <= slave_fsm.io.sl.writeAddr.ready @[AdderAxi.scala 28:25]
    slave_fsm.io.sl.writeData.bits.strb <= io.s0.writeData.bits.strb @[AdderAxi.scala 30:39]
    slave_fsm.io.sl.writeData.bits.data <= io.s0.writeData.bits.data @[AdderAxi.scala 31:39]
    slave_fsm.io.sl.writeData.valid <= io.s0.writeData.valid @[AdderAxi.scala 32:35]
    io.s0.writeData.ready <= slave_fsm.io.sl.writeData.ready @[AdderAxi.scala 33:25]
    io.s0.writeResp.valid <= slave_fsm.io.sl.writeResp.valid @[AdderAxi.scala 35:25]
    io.s0.writeResp.bits <= slave_fsm.io.sl.writeResp.bits @[AdderAxi.scala 36:24]
    slave_fsm.io.sl.writeResp.ready <= io.s0.writeResp.ready @[AdderAxi.scala 37:35]
    slave_fsm.io.sl.readAddr.bits.prot <= io.s0.readAddr.bits.prot @[AdderAxi.scala 39:38]
    slave_fsm.io.sl.readAddr.bits.addr <= io.s0.readAddr.bits.addr @[AdderAxi.scala 40:38]
    slave_fsm.io.sl.readAddr.valid <= io.s0.readAddr.valid @[AdderAxi.scala 41:34]
    io.s0.readAddr.ready <= slave_fsm.io.sl.readAddr.ready @[AdderAxi.scala 42:24]
    io.s0.readData.valid <= slave_fsm.io.sl.readData.valid @[AdderAxi.scala 44:24]
    slave_fsm.io.sl.readData.ready <= slave_fsm.io.sl.readData.ready @[AdderAxi.scala 45:34]
    io.s0.readData.bits.resp <= slave_fsm.io.sl.readData.bits.resp @[AdderAxi.scala 47:28]
    io.s0.readData.bits.data <= slave_fsm.io.sl.readData.bits.data @[AdderAxi.scala 48:28]
    reg value : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 17:33]
    reg regFlagStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 52:25]
    node _T_92 = eq(slave_fsm.io.ap_start, UInt<1>("h01")) @[AdderAxi.scala 54:30]
    node _T_94 = eq(regFlagStart, UInt<1>("h00")) @[AdderAxi.scala 54:57]
    node _T_95 = and(_T_92, _T_94) @[AdderAxi.scala 54:41]
    when _T_95 : @[AdderAxi.scala 54:69]
      node _T_97 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_99 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_100 = tail(_T_99, 1) @[Counter.scala 26:22]
      value <= _T_100 @[Counter.scala 26:13]
      when _T_97 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      regFlagStart <= UInt<1>("h01") @[AdderAxi.scala 56:18]
      skip @[AdderAxi.scala 54:69]
    node _T_104 = gt(value, UInt<1>("h00")) @[AdderAxi.scala 59:22]
    when _T_104 : @[AdderAxi.scala 59:28]
      slave_fsm.io.ap_done <= UInt<1>("h01") @[AdderAxi.scala 60:26]
      skip @[AdderAxi.scala 59:28]
    
