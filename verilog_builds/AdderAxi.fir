;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-08-25 22:51:12.887, builtAtMillis: 1503701472887
circuit AdderAxi : 
  module Adder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_5 = add(io.a, io.b) @[Adder.scala 17:18]
    node _T_6 = tail(_T_5, 1) @[Adder.scala 17:18]
    io.out <= _T_6 @[Adder.scala 17:10]
    
  module AdderAxi : 
    input clock : Clock
    input reset : UInt<1>
    output io : {m0 : {writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, strb : UInt<64>, last : UInt<1>}}, flip writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {id : UInt<1>, resp : UInt<2>}}, readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, size : UInt<3>, len : UInt<8>, burst : UInt<2>, id : UInt<1>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<512>, id : UInt<1>, last : UInt<1>, resp : UInt<2>}}}, s0 : {flip writeAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, flip writeData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, writeResp : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, flip readAddr : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<64>, prot : UInt<3>}}, readData : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.m0.writeAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 78:21]
    io.m0.writeData.valid <= UInt<1>("h00") @[AXIDefs.scala 79:21]
    io.m0.writeResp.ready <= UInt<1>("h00") @[AXIDefs.scala 80:21]
    io.m0.readAddr.valid <= UInt<1>("h00") @[AXIDefs.scala 81:20]
    io.m0.readData.ready <= UInt<1>("h00") @[AXIDefs.scala 82:20]
    io.m0.writeAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 84:25]
    io.m0.writeAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 85:25]
    io.m0.writeAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 86:25]
    io.m0.writeAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 87:24]
    io.m0.writeAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 88:26]
    io.m0.writeAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 89:25]
    io.m0.writeAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 90:26]
    io.m0.writeAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 91:24]
    io.m0.writeAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 92:23]
    io.m0.writeData.bits.strb <= UInt<1>("h00") @[AXIDefs.scala 95:25]
    io.m0.writeData.bits.last <= UInt<1>("h00") @[AXIDefs.scala 96:25]
    io.m0.readAddr.bits.addr <= UInt<1>("h00") @[AXIDefs.scala 98:24]
    io.m0.readAddr.bits.prot <= UInt<1>("h00") @[AXIDefs.scala 99:24]
    io.m0.readAddr.bits.size <= UInt<1>("h00") @[AXIDefs.scala 100:24]
    io.m0.readAddr.bits.len <= UInt<1>("h00") @[AXIDefs.scala 101:23]
    io.m0.readAddr.bits.burst <= UInt<1>("h00") @[AXIDefs.scala 102:25]
    io.m0.readAddr.bits.lock <= UInt<1>("h00") @[AXIDefs.scala 103:24]
    io.m0.readAddr.bits.cache <= UInt<1>("h00") @[AXIDefs.scala 104:25]
    io.m0.readAddr.bits.qos <= UInt<1>("h00") @[AXIDefs.scala 105:23]
    io.m0.readAddr.bits.id <= UInt<1>("h00") @[AXIDefs.scala 106:22]
    inst adder of Adder @[AdderAxi.scala 23:21]
    adder.io is invalid
    adder.clock <= clock
    adder.reset <= reset
    reg ap_start : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 26:21]
    reg auto_restart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 27:25]
    reg ap_idle : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[AdderAxi.scala 28:20]
    reg ap_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 29:20]
    node _T_96 = eq(reset, UInt<1>("h00")) @[AdderAxi.scala 30:27]
    reg areset : UInt<1>, clock @[AdderAxi.scala 30:19]
    areset <= _T_96 @[AdderAxi.scala 30:19]
    reg ap_start_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 31:23]
    ap_start_r <= ap_start @[AdderAxi.scala 31:23]
    node _T_101 = eq(ap_start_r, UInt<1>("h00")) @[AdderAxi.scala 32:35]
    node ap_start_pulse = and(ap_start, _T_101) @[AdderAxi.scala 32:33]
    when ap_done : @[AdderAxi.scala 35:16]
      ap_idle <= UInt<1>("h01") @[AdderAxi.scala 36:13]
      skip @[AdderAxi.scala 35:16]
    node _T_104 = eq(ap_done, UInt<1>("h00")) @[AdderAxi.scala 35:16]
    node _T_105 = and(_T_104, ap_start_pulse) @[AdderAxi.scala 37:29]
    when _T_105 : @[AdderAxi.scala 37:29]
      ap_idle <= UInt<1>("h00") @[AdderAxi.scala 38:13]
      skip @[AdderAxi.scala 37:29]
    node _T_108 = eq(ap_done, UInt<1>("h00")) @[AdderAxi.scala 35:16]
    node _T_110 = eq(ap_start_pulse, UInt<1>("h00")) @[AdderAxi.scala 37:29]
    node _T_111 = and(_T_108, _T_110) @[AdderAxi.scala 37:29]
    when _T_111 : @[AdderAxi.scala 39:14]
      ap_idle <= ap_idle @[AdderAxi.scala 40:13]
      skip @[AdderAxi.scala 39:14]
    reg stateSlaveWrite : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 53:28]
    reg writeAddr : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[AdderAxi.scala 54:22]
    reg stateSlaveRead : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[AdderAxi.scala 56:27]
    reg readData : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[AdderAxi.scala 57:21]
    node _T_119 = eq(stateSlaveWrite, UInt<3>("h00")) @[AdderAxi.scala 61:53]
    node _T_120 = and(reset, _T_119) @[AdderAxi.scala 61:34]
    io.s0.writeAddr.ready <= _T_120 @[AdderAxi.scala 61:25]
    node _T_121 = eq(stateSlaveWrite, UInt<3>("h01")) @[AdderAxi.scala 62:45]
    io.s0.writeData.ready <= _T_121 @[AdderAxi.scala 62:25]
    io.s0.writeResp.bits <= UInt<2>("h00") @[AdderAxi.scala 63:24]
    node _T_167 = eq(stateSlaveWrite, UInt<3>("h02")) @[AdderAxi.scala 64:45]
    io.s0.writeResp.valid <= _T_167 @[AdderAxi.scala 64:25]
    node addrwr_handshake = and(io.s0.writeAddr.valid, io.s0.writeAddr.ready) @[AdderAxi.scala 67:48]
    node write_handshake = and(io.s0.writeData.valid, io.s0.writeData.ready) @[AdderAxi.scala 68:47]
    when addrwr_handshake : @[AdderAxi.scala 71:25]
      writeAddr <= io.s0.writeAddr.bits.addr @[AdderAxi.scala 72:15]
      skip @[AdderAxi.scala 71:25]
    node _T_168 = eq(stateSlaveWrite, UInt<3>("h00")) @[AdderAxi.scala 75:24]
    when _T_168 : @[AdderAxi.scala 75:34]
      when io.s0.writeAddr.valid : @[AdderAxi.scala 76:32]
        stateSlaveWrite <= UInt<3>("h01") @[AdderAxi.scala 77:23]
        skip @[AdderAxi.scala 76:32]
      node _T_170 = eq(io.s0.writeAddr.valid, UInt<1>("h00")) @[AdderAxi.scala 76:32]
      when _T_170 : @[AdderAxi.scala 78:16]
        stateSlaveWrite <= UInt<3>("h00") @[AdderAxi.scala 79:23]
        skip @[AdderAxi.scala 78:16]
      skip @[AdderAxi.scala 75:34]
    node _T_171 = eq(stateSlaveWrite, UInt<3>("h01")) @[AdderAxi.scala 81:30]
    node _T_173 = eq(_T_168, UInt<1>("h00")) @[AdderAxi.scala 75:34]
    node _T_174 = and(_T_173, _T_171) @[AdderAxi.scala 81:42]
    when _T_174 : @[AdderAxi.scala 81:42]
      when io.s0.writeData.valid : @[AdderAxi.scala 82:32]
        stateSlaveWrite <= UInt<3>("h02") @[AdderAxi.scala 83:23]
        skip @[AdderAxi.scala 82:32]
      node _T_176 = eq(io.s0.writeData.valid, UInt<1>("h00")) @[AdderAxi.scala 82:32]
      when _T_176 : @[AdderAxi.scala 84:16]
        stateSlaveWrite <= UInt<3>("h01") @[AdderAxi.scala 85:23]
        skip @[AdderAxi.scala 84:16]
      skip @[AdderAxi.scala 81:42]
    node _T_177 = eq(stateSlaveWrite, UInt<3>("h02")) @[AdderAxi.scala 87:30]
    node _T_179 = eq(_T_168, UInt<1>("h00")) @[AdderAxi.scala 75:34]
    node _T_181 = eq(_T_171, UInt<1>("h00")) @[AdderAxi.scala 81:42]
    node _T_182 = and(_T_179, _T_181) @[AdderAxi.scala 81:42]
    node _T_183 = and(_T_182, _T_177) @[AdderAxi.scala 87:41]
    when _T_183 : @[AdderAxi.scala 87:41]
      when io.s0.writeResp.ready : @[AdderAxi.scala 88:32]
        stateSlaveWrite <= UInt<3>("h00") @[AdderAxi.scala 89:23]
        skip @[AdderAxi.scala 88:32]
      node _T_185 = eq(io.s0.writeResp.ready, UInt<1>("h00")) @[AdderAxi.scala 88:32]
      when _T_185 : @[AdderAxi.scala 90:16]
        stateSlaveWrite <= UInt<3>("h02") @[AdderAxi.scala 91:23]
        skip @[AdderAxi.scala 90:16]
      skip @[AdderAxi.scala 87:41]
    node _T_187 = eq(_T_168, UInt<1>("h00")) @[AdderAxi.scala 75:34]
    node _T_189 = eq(_T_171, UInt<1>("h00")) @[AdderAxi.scala 81:42]
    node _T_190 = and(_T_187, _T_189) @[AdderAxi.scala 81:42]
    node _T_192 = eq(_T_177, UInt<1>("h00")) @[AdderAxi.scala 87:41]
    node _T_193 = and(_T_190, _T_192) @[AdderAxi.scala 87:41]
    when _T_193 : @[AdderAxi.scala 94:14]
      stateSlaveWrite <= UInt<3>("h00") @[AdderAxi.scala 95:21]
      skip @[AdderAxi.scala 94:14]
    node _T_194 = eq(stateSlaveRead, UInt<3>("h00")) @[AdderAxi.scala 99:52]
    node _T_195 = and(reset, _T_194) @[AdderAxi.scala 99:33]
    io.s0.readAddr.ready <= _T_195 @[AdderAxi.scala 99:24]
    io.s0.readData.bits.data <= readData @[AdderAxi.scala 100:28]
    io.s0.readData.bits.resp <= UInt<2>("h00") @[AdderAxi.scala 101:28]
    node _T_196 = eq(stateSlaveRead, UInt<3>("h03")) @[AdderAxi.scala 102:43]
    io.s0.readData.valid <= _T_196 @[AdderAxi.scala 102:24]
    node addrrd_handshake = and(io.s0.readAddr.valid, io.s0.readAddr.ready) @[AdderAxi.scala 103:47]
    node _T_197 = eq(stateSlaveRead, UInt<3>("h00")) @[AdderAxi.scala 107:23]
    when _T_197 : @[AdderAxi.scala 107:33]
      when io.s0.readAddr.valid : @[AdderAxi.scala 108:31]
        stateSlaveRead <= UInt<3>("h03") @[AdderAxi.scala 109:22]
        skip @[AdderAxi.scala 108:31]
      node _T_199 = eq(io.s0.readAddr.valid, UInt<1>("h00")) @[AdderAxi.scala 108:31]
      when _T_199 : @[AdderAxi.scala 110:16]
        stateSlaveRead <= UInt<3>("h00") @[AdderAxi.scala 111:22]
        skip @[AdderAxi.scala 110:16]
      skip @[AdderAxi.scala 107:33]
    node _T_200 = eq(stateSlaveRead, UInt<3>("h03")) @[AdderAxi.scala 113:29]
    node _T_202 = eq(_T_197, UInt<1>("h00")) @[AdderAxi.scala 107:33]
    node _T_203 = and(_T_202, _T_200) @[AdderAxi.scala 113:43]
    when _T_203 : @[AdderAxi.scala 113:43]
      node _T_204 = and(io.s0.readData.valid, io.s0.readData.ready) @[AdderAxi.scala 114:31]
      when _T_204 : @[AdderAxi.scala 114:54]
        stateSlaveRead <= UInt<3>("h00") @[AdderAxi.scala 115:22]
        skip @[AdderAxi.scala 114:54]
      node _T_206 = eq(_T_204, UInt<1>("h00")) @[AdderAxi.scala 114:54]
      when _T_206 : @[AdderAxi.scala 116:16]
        stateSlaveRead <= UInt<3>("h03") @[AdderAxi.scala 117:22]
        skip @[AdderAxi.scala 116:16]
      skip @[AdderAxi.scala 113:43]
    node _T_208 = eq(_T_197, UInt<1>("h00")) @[AdderAxi.scala 107:33]
    node _T_210 = eq(_T_200, UInt<1>("h00")) @[AdderAxi.scala 113:43]
    node _T_211 = and(_T_208, _T_210) @[AdderAxi.scala 113:43]
    when _T_211 : @[AdderAxi.scala 119:14]
      stateSlaveRead <= UInt<3>("h00") @[AdderAxi.scala 120:20]
      skip @[AdderAxi.scala 119:14]
    when addrrd_handshake : @[AdderAxi.scala 124:25]
      node _T_213 = eq(io.s0.readAddr.bits.addr, UInt<1>("h00")) @[AdderAxi.scala 125:18]
      when _T_213 : @[AdderAxi.scala 125:30]
        node _T_214 = shl(ap_done, 1) @[AdderAxi.scala 126:52]
        node _T_215 = or(ap_start, _T_214) @[AdderAxi.scala 126:41]
        node _T_216 = shl(ap_idle, 2) @[AdderAxi.scala 126:78]
        node _T_217 = or(_T_215, _T_216) @[AdderAxi.scala 126:67]
        node _T_218 = shl(ap_done, 3) @[AdderAxi.scala 126:105]
        node _T_219 = or(_T_217, _T_218) @[AdderAxi.scala 126:93]
        node _T_220 = shl(auto_restart, 7) @[AdderAxi.scala 126:136]
        node _T_221 = or(_T_219, _T_220) @[AdderAxi.scala 126:120]
        readData <= _T_221 @[AdderAxi.scala 126:18]
        skip @[AdderAxi.scala 125:30]
      skip @[AdderAxi.scala 124:25]
    node _T_223 = eq(writeAddr, UInt<1>("h00")) @[AdderAxi.scala 131:39]
    node _T_224 = and(write_handshake, _T_223) @[AdderAxi.scala 131:26]
    node _T_225 = bits(io.s0.writeData.bits.strb, 0, 0) @[AdderAxi.scala 131:79]
    node _T_226 = and(_T_224, _T_225) @[AdderAxi.scala 131:51]
    node _T_227 = bits(io.s0.writeData.bits.data, 0, 0) @[AdderAxi.scala 131:111]
    node _T_228 = and(_T_226, _T_227) @[AdderAxi.scala 131:83]
    when _T_228 : @[AdderAxi.scala 131:115]
      ap_start <= UInt<1>("h01") @[AdderAxi.scala 132:16]
      skip @[AdderAxi.scala 131:115]
    node _T_231 = eq(_T_228, UInt<1>("h00")) @[AdderAxi.scala 131:115]
    node _T_232 = and(_T_231, ap_done) @[AdderAxi.scala 133:25]
    when _T_232 : @[AdderAxi.scala 133:25]
      ap_start <= auto_restart @[AdderAxi.scala 134:16]
      skip @[AdderAxi.scala 133:25]
    node _T_234 = eq(io.s0.readAddr.bits.addr, UInt<1>("h00")) @[AdderAxi.scala 138:34]
    node _T_235 = and(addrrd_handshake, _T_234) @[AdderAxi.scala 138:25]
    when _T_235 : @[AdderAxi.scala 138:46]
      ap_done <= UInt<1>("h00") @[AdderAxi.scala 139:15]
      skip @[AdderAxi.scala 138:46]
    node _T_238 = eq(writeAddr, UInt<1>("h00")) @[AdderAxi.scala 144:37]
    node _T_239 = and(write_handshake, _T_238) @[AdderAxi.scala 144:24]
    node _T_240 = bits(io.s0.writeData.bits.strb, 0, 0) @[AdderAxi.scala 144:77]
    node _T_241 = and(_T_239, _T_240) @[AdderAxi.scala 144:49]
    when _T_241 : @[AdderAxi.scala 144:81]
      node _T_242 = bits(io.s0.writeData.bits.data, 7, 7) @[AdderAxi.scala 145:46]
      auto_restart <= _T_242 @[AdderAxi.scala 145:18]
      skip @[AdderAxi.scala 144:81]
    reg value : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Counter.scala 17:33]
    reg regFlagStart : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AdderAxi.scala 150:25]
    node _T_248 = eq(ap_start, UInt<1>("h01")) @[AdderAxi.scala 161:17]
    node _T_250 = eq(regFlagStart, UInt<1>("h00")) @[AdderAxi.scala 161:44]
    node _T_251 = and(_T_248, _T_250) @[AdderAxi.scala 161:28]
    when _T_251 : @[AdderAxi.scala 161:56]
      node _T_253 = eq(value, UInt<5>("h01d")) @[Counter.scala 25:24]
      node _T_255 = add(value, UInt<1>("h01")) @[Counter.scala 26:22]
      node _T_256 = tail(_T_255, 1) @[Counter.scala 26:22]
      value <= _T_256 @[Counter.scala 26:13]
      when _T_253 : @[Counter.scala 28:21]
        value <= UInt<1>("h00") @[Counter.scala 28:29]
        skip @[Counter.scala 28:21]
      regFlagStart <= UInt<1>("h01") @[AdderAxi.scala 163:18]
      skip @[AdderAxi.scala 161:56]
    node _T_260 = gt(value, UInt<1>("h00")) @[AdderAxi.scala 166:22]
    when _T_260 : @[AdderAxi.scala 166:28]
      ap_done <= UInt<1>("h01") @[AdderAxi.scala 167:13]
      skip @[AdderAxi.scala 166:28]
    
